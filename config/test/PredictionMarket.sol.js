"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var factory = function factory(Pudding) {
  // Inherit from Pudding. The dependency on Babel sucks, but it's
  // the easiest way to extend a Babel-based class. Note that the
  // resulting .js file does not have a dependency on Babel.

  var PredictionMarket = (function (_Pudding) {
    _inherits(PredictionMarket, _Pudding);

    function PredictionMarket() {
      _classCallCheck(this, PredictionMarket);

      _get(Object.getPrototypeOf(PredictionMarket.prototype), "constructor", this).apply(this, arguments);
    }

    return PredictionMarket;
  })(Pudding);

  ;

  // Set up specific data for this class.
  PredictionMarket.abi = [{ "constant": false, "inputs": [{ "name": "odds", "type": "uint256" }], "name": "buyOrder", "outputs": [], "type": "function" }, { "constant": false, "inputs": [], "name": "awardBuyers", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "evaluateOdds", "outputs": [{ "name": "", "type": "uint256" }], "type": "function" }, { "constant": false, "inputs": [], "name": "cancelIncompleteOrders", "outputs": [], "type": "function" }, { "constant": false, "inputs": [], "name": "revert", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "odds", "type": "uint256" }], "name": "sellOrder", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "orders", "outputs": [{ "name": "seller", "type": "address" }, { "name": "buyer", "type": "address" }, { "name": "odds", "type": "uint256" }, { "name": "sellerQuantity", "type": "uint256" }, { "name": "buyerQuantity", "type": "uint256" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "odds", "type": "uint256" }, { "name": "quantity", "type": "uint256" }], "name": "cancelOrder", "outputs": [], "type": "function" }, { "constant": false, "inputs": [], "name": "awardSellers", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "ordersLength", "outputs": [{ "name": "result", "type": "uint256" }], "type": "function" }, { "inputs": [{ "name": "_endTime", "type": "uint256" }], "type": "constructor" }];
  PredictionMarket.binary = "60606040819052603260025560208061107083395060806040525160008054600160a060020a03191633179055806003600050819055505061102b806100456000396000f3606060405236156100825760e060020a600035046322f85eaa811461008457806358eae0041461013857806361cc576d146101fe57806370e18692146102085780637da3c3ab146102fc57806397514d90146103e2578063a85c38ef146104a0578063b6ed0632146104f9578063b6f29d50146105b2578063be8acd3f14610676575b005b61008260043560006000600060006000600060006000600060a060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200150600060a06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020015060018d108061010d575060638d115b15610ca75760405133600160a060020a031690600090349082818181858883f1935050505050610491565b610082600080548190600160a060020a0390811633909116141561086b575b60015460ff8316101561086f5760018054839081101561000257600091825260050260008051602061100b833981519152810154600080516020610feb833981519152919091019250600160a060020a0316148015906101c257508054600160a060020a0316600014155b1561087d57604051600382015460048301546001840154600160a060020a031692600092919091019082818181858883f19350505050506108fe565b6106816002545b90565b610082600080548190600160a060020a0390811633909116141561086b57600354421061086b575b60015460ff8316101561086b5760018054839081101561000257600091825260050260008051602061100b833981519152810154600080516020610feb833981519152919091019250600160a060020a031614156102b15760405181546003830154600160a060020a0391909116916000919082818181858883f150505050505b8054600160a060020a0316600014156102f05760405160018201546004830154600160a060020a0391909116916000919082818181858883f150505050505b60019190910190610230565b610082600080548190600160a060020a0390811633909116141561086b575b60015460ff8316101561086f5760018054839081101561000257600091825260050260008051602061100b833981519152810154600080516020610feb833981519152919091019250600160a060020a03161461039b5760405160048201546001830154600160a060020a0316916000919082818181858883f150505050505b8054600160a060020a03166000146103d65760405181546003830154600160a060020a0391909116916000919082818181858883f150505050505b6001919091019061031b565b61008260043560006000600060006000600060006000600060a060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200150600060a06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020015060018d108061046b575060638d115b156109975760405133600160a060020a031690600090349082818181858883f150505050505b50505050505050505050505050565b610693600435600180548290811015610002576000918252600502600080516020610feb833981519152019050805460038201546001830154600284015460049490940154600160a060020a0393841695509216929185565b610082600435602435600354600090819081904210610513575b60009250600091505b60015460ff831610156106ca5760018054839081101561000257600091909152600502600080516020610feb833981519152019050821515610750576002810154851415610856576001810154600160a060020a039081163390911614801561058f57508054600160a060020a03166000145b156107db576004810180548590039081905560009011610829576001925061083c565b610082600080548190600160a060020a0390811633909116141561086b575b60015460ff8316101561086f5760018054839081101561000257600091825260050260008051602061100b833981519152810154600080516020610feb833981519152919091019250600160a060020a03161480159061063c57508054600160a060020a0316600014155b1561090a57805460405160038301546004840154600160a060020a03939093169260009291019082818181858883f193505050505061098b565b610681600154610205565b60408051918252519081900360200190f35b60408051600160a060020a039687168152949095166020850152838501929092526060830152608082015290519081900360a00190f35b82156108605760018054600019810180835590919082801582901161085b57600083905261085b906005908102600080516020610feb833981519152908101918402015b80821115610867578054600160a060020a031990811682556001820180549091168155600060028301819055600383018190556004929092019190915561070e565b806001600050600184038154811015610002576000918252600502600080516020610feb83398151915201905080548254600160a060020a03908116600160a060020a03199283161783556001838101805491860154909216921691909117905560028281015490820155600382810154908201556004918201549101555b6001919091019061051c565b8054600160a060020a039081163390911614801561080657506001810154600160a060020a03166000145b156108565760038101805485900390819055600090116108415760019250610856565b6004810154606481028690040360038201555b610856565b60038101546064868103908202040360048201555b6107cf565b505050505b5050505050565b5090565b5050565b600054600160a060020a0316ff5b6001810154600160a060020a03166000146108c35760405160018201546004830154600160a060020a0391909116916000919082818181858883f19350505050506108fe565b8054600160a060020a03166000146108fe5760405181546003830154600160a060020a0391909116916000919082818181858883f150505050505b60019190910190610157565b6001810154600160a060020a03166000146109505760405160018201546004830154600160a060020a0391909116916000919082818181858883f193505050505061098b565b8054600160a060020a031660001461098b5760405181546003830154600160a060020a0391909116916000919082818181858883f150505050505b600191909101906105d1565b339b50349a505b60008b111561049157600099506000985060018d039750600096505b60015460ff88161015610a2e57600180548890811015610002576000918252600502600080516020610feb833981519152018054909750600160a060020a0316148015610a0b575060028601548890115b15610a2257600286015460019a5096985095965087955b600196909601956109ba565b8915610a8c576002889055600180548a90811015610002576000918252600502600080516020610feb83398151915201905060038101549095508b10610b0a578454600160a060020a0319168c1785556003850154909a0399610bbe565b8a8d6064038c6064020403915060a0604051908101604052808d8152602001600081526020018e81526020018c815260200183815260200150905060016000508054806001018281815481835581811511610c40576000839052610c40906005908102600080516020610feb8339815191529081019184020161070e565b8a85600201600050546064038c606402040393508460040160005054841015610ba9576040805160a0810182528d8152600187810154600160a060020a03166020830152600288015492820192909252606081018d9052608081018690528154808301808455919550908281838015829011610bc3576000839052610bc3906005908102600080516020610feb8339815191529081019184020161070e565b8454600160a060020a0319168c17855560009a505b610ca2565b5050509190906000526020600020906005020160005080548551600160a060020a031991821617825560018201805460208801519216919091179055604085015160028201556060850151600382810191909155608086015160049283015590870180548790039055860180549c909c03909b5560009a50610bbe565b5050509190906000526020600020906005020160005082518154600160a060020a03199081169091178255602084015160018301805490921617905560408301516002820155606083015160038201556080830151600491909101555060009a505b61099e565b339b50349a505b60008b11156104915760009950600098508c6001019750600096505b60015460ff88161015610d505760018054889081101561000257600091825260050260008051602061100b833981519152810154600080516020610feb833981519152919091019750600160a060020a0316148015610d2d575060028601548890105b15610d4457600286015460019a5096985095965087955b60019690960195610cca565b8915610dd1576002889055600180548a908110156100025750600052600589027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa810154600080516020610feb8339815191529190910195508b10610e4c57600185018054600160a060020a0319168d1790556004850154909a0399610f01565b8a8d8c6064020403915060a060405190810160405280600081526020018d81526020018e81526020018381526020018c815260200150905060016000508054806001018281815481835581811511610f84576000839052610f84906005908102600080516020610feb8339815191529081019184020161070e565b8a85600201600050548c606402040393508460030160005054841015610ee8576040805160a0810182528654600160a060020a03168152602081018e905260028701549181019190915260608101859052608081018c90526001805480820180835592955090918281838015829011610f06576000839052610f06906005908102600080516020610feb8339815191529081019184020161070e565b600185018054600160a060020a0319168d17905560009a505b610fe6565b5050509190906000526020600020906005020160005080548551600160a060020a031991821617825560018201805460208801519216919091179055604085015160028201556060850151600382810191909155608086015160049283015590870180549d909d03909c555099840180548490039055600099610f01565b5050509190906000526020600020906005020160005082518154600160a060020a03199081169091178255602084015160018301805490921617905560408301516002820155606083015160038201556080830151600491909101555060009a505b610cae56b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7";

  if ("0x1441618a63e1a1700619193bdb762a24010dfbc4" != "") {
    PredictionMarket.address = "0x1441618a63e1a1700619193bdb762a24010dfbc4";

    // Backward compatibility; Deprecated.
    PredictionMarket.deployed_address = "0x1441618a63e1a1700619193bdb762a24010dfbc4";
  }

  PredictionMarket.generated_with = "1.0.2";
  PredictionMarket.contract_name = "PredictionMarket";

  return PredictionMarket;
};

// Nicety for Node.
factory.load = factory;

if (typeof module != "undefined") {
  module.exports = factory;
} else {
  // There will only be one version of Pudding in the browser,
  // and we can use that.
  window.PredictionMarket = factory;
}